model  = lm(y~.,data=x)
ggplot(data = x,aes(x1,y))+geom_point()+geom_smooth(method='lm')
model$coefficients
predict(model,x)
x = data.frame(x1,x2,x1**2,x2**2,x1**3,x2**3,y,y_bar=predict(model,x))
ggplot(data = x,aes(x1,y))+geom_point()+geom_abline(aes(x1,y_bar))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="'lm")
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="lm")
x$x2.3 = NULL
x$x2.2 = NULL
x = data.frame(x1,x2,x1**2,x2**2,x1**3,x2**3,y,y_bar=predict(model,x))
x = data.frame(x,y_bar=predict(model,x))
x
y = x$y
y_bar = x$y_bar
x$y_bar = NULL
lm(y~.data=x)
lm(y~.,data=x)
model = lm(y~.,data=x)
x = data.frame(x,y,y_bar,y_bar_reduce = predict(model,x))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="lm")+geom_line(aes(x1,y_bar_reduce,colours = "red"))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="lm")+geom_point(aes(x1,y_bar_reduce,colours = "red"))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="lm")+geom_point(aes(x1,y_bar_reduce,colour = "red"))
ggplot(data = x,aes(x1,y))+geom_point()+geom_line(aes(x1,y_bar))+geom_smooth(method="lm")+geom_line(aes(x1,y_bar_reduce,colour = "red"))
y_bar_reduce = x$y_bar_reduce
x$x1.3 = NULL
y = x1+x2+x$x1.2
x$y_bar_reduce = NULL
x$y_bar = NULL
model = lm(y~.data = x)
model = lm(y~.,data = x)
model$coefficients
x$y.1 = NULL
model = lm(y~.,data = x)
model$coefficients
x = as.matrix(x)
w = (t(x)%*%(x))%*%solve(x)%*%(x)
y = x$y
y = as.data.frame(x)$y
y = as.matrix(y)
w = (t(x)%*%(x))%*%solve(x)%*%(x)
w = (t(x)%*%(x))%*%solve(x)%*%(y)
solve(x)
x.solve()
ginv(x)
solve(x)
x
x = as.data.frame(x)
x$y = NULL
x = as.matrix(x)
solve(x)
x
install.packages(;MASS)
install.packages(MASS)
install.packages('MASS')
library('MASS')
ginv(x)
w = (t(x)%*%(x))%*%solve(x)%*%(y)
w = (t(x)%*%(x))%*%ginv(x)%*%(y)
w
w = ginv(t(x)%*%(x))%*%t(x)%*%(y)
w
model$coefficients
y = seq(1,0,10)
y = seq(1,0)
y
y
y = seq(1,0,2)
help(seq)
rep(c(1,0),5)
x = as.data.frame(x)
x = data.frame(x,y=rep(c(1,0),5))
x = data.frame(x,y=rep(c(1,0),5),x0=rep(0,10))
model = lm(y~.,data=x)
model
x$y.1
x$y.1 = NULL
model = lm(y~.,data=x)
model
predict(model,x)
savehistory("~/Desktop/Untitled.Rhistory")
x = ppois(1:100,lambda = 12)
plot(x)
hist(x)
plot(x)
cdf(x)
ecdf(x)
plot(ecdf(x))
x = ppois(1:20,lambda = 4)
plot(x)
x = ppois(1:20,lambda = 4,lower.tail = FALSE)
plot(x)
x
x = ppois(1:20,lambda = 4)
x
x = ppois(1:20,lambda = 1)
x
x = ppois(0:20,lambda = 1)
x
ppois(1,lambda = 1)
help(ppois)
x = dpois(0:20,lambda = 1)
plot(x)
x = dpois(0:20,lambda = 4)
plot(x)
x = dpois(0:20,lambda = 1)
plot(x)
x = dpois(0:20,lambda = 4)
plot(x)
x = dpois(0:20,lambda = 5)
plot(x)
y = dnorm(0:20,mean = 5,sd = 1)
plot(y)
plot(x)
mean(0:20)
x = dpois(0:20,lambda = 10)
plot(x)
x = dpois(0:20,lambda = 20)
plot(x)
x = dpois(0:20,lambda = 10)
plot(x)
plot(dnorm(0:20,mean = 10,sd = 1))
plot(x)
plot(dnorm(0:20,mean = 10,sd = 2))
plot(dnorm(0:20,mean = 10,sd = 3))
x
x*[0:20]
x*0:20
sum(x*0:20)
x = dpois(0:20,lambda = 1)
sum(x*0:20)
0:20 %*% x
x = dpois(0:20,lambda = 20)
0:20 %*% x
x = dpois(0:20,lambda = 1:20)
x
0:20 %*% x
rpois(10)
rpois(lambda = 10)
rpois(1,lambda = 10)
rpois(1,lambda = 10)
rpois(lambda = 10)
rpois(1,lambda = 10)
replicate(100,rpois(1,lambda = 10))
y = replicate(100,rpois(1,lambda = 10))
mean(y)
hist(y)
y = replicate(200,rpois(1,lambda = 10))
mean(y)
dpois(y,lambda = 10)
dpois(y,lambda = 0.0)
dpois(y,lambda = 0.1)
dpois(y,lambda = 0.2)
dpois(y,lambda = 0.2)>1
dpois(y,lambda = 0.2)+1>1
dpois(y,lambda = 0.2)[dpois(y,lambda = 0.2)+1>1]
4.200639e-16+1
r = dpois(y,lambda = 0.2)+1>1
r = dpois(y,lambda = 0.2)+1
r[r>1]
r>1
r = dpois(y,lambda = 0.2)+1
r[r>1]
len(r[r>1])/len(r)
length(r[r>1])/length(r)
r[r>1]y
y
y = replicate(200,rpois(1,lambda = 0.2))
y = replicate(200,rpois(1,lambda = 0.2)+1)
y>1
length(y[y>1])/length(y)
y
y-1
y = replicate(200,rpois(1,lambda = 1.0)+1)
length(y[y>1])/length(y)
y = replicate(200,rpois(1,lambda = 2.0)+1)
length(y[y>1])/length(y)
y = replicate(200,rpois(1,lambda = 10.0)+1)
length(y[y>1])/length(y)
rnorm(100,mean = 0, sd = 1)
plot(rnorm(100,mean = 0, sd = 1))
hist(rnorm(100,mean = 0, sd = 1))
hist(rnorm(1000,mean = 0, sd = 1))
hist(rnorm(1000,mean = 0, sd = 2))
hist(rnorm(1000,mean = 0, sd = 1000))
arr = c(1,2,3,4,5,6)
mean(arr)
sample(arr,6)
sample(arr,6)
sample(arr,6)
sample(arr,6)
sample(arr,6,replace = True)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
sample(arr,6,replace = TRUE)
x = function(){
return(mean(sample(arr,6,replace=TRUE)))
}
x()
x()
x()
x()
x()
x()
x()
x()
y = replicate(1000,x)
y
y = replicate(1000,x())
y
sort(y)
rpois(550,lambda = 500)
dpois(550,lambda = 500)
dpois(550,lambda = 550)
hist(rpois(550,lambda = 500))
dpois(550,lambda = 550)
dpois(10,lambda = 10)
plot(ppois(1:000,lambda = 550))
plot(dpois(1:000,lambda = 550))
plot(dpois(1:000,lambda = 550))
plot(dpois(1:100,lambda = 550))
plot(dpois(1:1000,lambda = 550))
plot(dnorm(1:1000,mean = 550, sd = 1))
plot(dnorm(1:1000,mean = 550, sd = 2))
plot(dnorm(1:1000,mean = 550, sd = 10))
plot(dnorm(1:1000,mean = 550, sd = 100))
plot(dnorm(1:1000,mean = 550, sd = 1000))
plot(dnorm(1:1000,mean = 550, sd = 2000))
plot(dnorm(1:1000,mean = 550, sd = 200000))
plot(dnorm(1:1000,mean = 550, sd = 20))
x = pnorm(1:100,mean = 0,sd = 1)
y = pnorm(100:200,mean = 0,sd = 1)
cor(x,y)
y = pnorm(101:200,mean = 0,sd = 1)
cor(x,y)
y = pnorm(101:200,mean = 0,sd = 2)
cor(x,y)
x = rnorm(1:100,mean = 0,sd = 1)
x
hist(x)
y = dnorm(101:200,mean = 0,sd = 2)
y = enorm(101:200,mean = 0,sd = 2)
y = dnorm(101:200,mean = 0,sd = 2)
cor(x,y)
y
y = dnorm(0:100,mean = 0,sd = 2)
cor(x,y)
y = dnorm(1:100,mean = 0,sd = 2)
cor(x,y)
y = dnorm(1:100,mean = 0,sd = 2)
cor(x,y)
plot(x,y)
y = dnorm(1:100,mean = 0,sd = 1)
plot(x,y)
x = dnorm(1:100,mean = 0,sd = 1)
plot(x,y)
cor(x,y)
x = dnorm(1:100,mean = 0,sd = 1.1)
cor(x,y)
install.packages('babynames')
library(babynames)
library(dplyr)
babynames %>%
filter(names)%>%
print
help(filter)
filter(babynames,substr(names,1,3)=='Ste')
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Ste")) %>%
print
library(magrittr)
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Ste")) %>%
print
babynames[substr(babynames$name,1,3)=="Ste",]
babynames %>%
group_by(year) %>%
summarise(mean(n))
babynaems %>%
l
babynames %>%
filter(contains(name,'Ste'))
help(contains)
filter(contains(name,'Ste'))
babynames %>%
filter(contains('Ste'))
babynames %>%
filter(contains("Ste"))
babynames %>%
select(name,contains("Ste"))
babynames %>%
name %>% select(contains("Ste"))
babynames %>%
select(name %>% contains("Ste"))
help("group_by")
babynames %>%
filter(name %>% contains("Ste"))
babynames %>%
summarise(mean = mean(year))
summarise(babynames,year,mean(year))
group_by(babynames,year)
help("summarise")
group_by(babynames,year,sex)
runif(4,min = 1,max = 4)
samle(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4,replace = TRUE)
sample(1:4,4,replace = TRUE)
sample(1:4,4,replace = TRUE)
sample(1:4,4,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
sample(1:4,1,replace = TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
len_trials
mean(len_trials)
source('~/.active-rstudio-document')
mean(len_trials)
source('~/.active-rstudio-document')
mean(len_trials)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean(len_trials)
round(2.8)
round(2.3)
source('~/.active-rstudio-document')
mean(len_trials)
plot(len_trials)
hist(len_trials)
source('~/.active-rstudio-document')
hist(len_trials)
hist(len_trials,breaks = 2)
hist(len_trials,breaks = 20)
hist(len_trials,breaks = 30)
hist(len_trials,breaks = 50)
hist(len_trials,breaks = 10)
source('~/.active-rstudio-document')
hist(len_trials,breaks = 10)
mean(len_trials)
source('~/.active-rstudio-document')
mean(len_trials)
exp(4)
setwd("~/Project_fatalities_USA/Project_road_fatalities/FARS_Auxiliary_Analytical_User_Manuals/FARS2015NationalCSV")
library(dplyr)
county = read.csv('us_county.csv') #Received from prof. D Ficklin from geology department
fatalities = read.csv('final_data.csv')
county = county %>% select(STATE_NAME,STATE_FIPS)
county = county[!duplicated(county$STATE_NAME),]
#fatalities = merge(fatalities,county,by.x = "OBJECT_ID",by.y = "STATE_FIPS",all.x =FALSE)
# Chunk 1
library(dplyr)
county = read.csv('us_county.csv') #Received from prof. D Ficklin from geology department
fatalities = read.csv('final_data.csv')
county = county %>% select(STATE_NAME,STATE_FIPS)
county = county[!duplicated(county$STATE_NAME),]
#fatalities = merge(fatalities,county,by.x = "OBJECT_ID",by.y = "STATE_FIPS",all.x =FALSE)
# Chunk 2
library(ggplot2)
accidentFatalitiesState =  fatalities %>% group_by(STATE_NAME) %>% summarise(count = n())
ggplot(data.frame(table(fatalities$STATE_NAME))) + aes(y = Freq, x = reorder(Var1,Freq)) + geom_bar(stat = 'identity') + coord_flip() + ylab("Total Number of fatalities accident") + xlab("State Name") + ggtitle("Fatalities accident by State") + scale_y_continuous(breaks = seq(1,max(accidentFatalitiesState$count),by = 500)) +  theme_minimal() + theme(title = element_text(family = "Trebuchet MS", color="#422164", face="bold", size=15)) + theme(text = element_text(size=8,colour="#266164"))
# Chunk 3
population = read.csv('population.csv')
accidentFatalitiesState = merge(accidentFatalitiesState,select(fatalities,OBJECT_ID,STATE_NAME),by='STATE_NAME')
accidentFatalitiesState = accidentFatalitiesState[!duplicated(accidentFatalitiesState$STATE_NAME),]
accidentFatalitiesState  = merge(accidentFatalitiesState,population,by = 'OBJECT_ID')
accidentFatalitiesState = mutate(accidentFatalitiesState,ratio = log2(count/Population))
ggplot(accidentFatalitiesState) + aes(y = ratio, x = reorder(STATE_NAME,ratio)) + coord_flip() + geom_bar(stat='identity') + labs(title = 'Ratio of accident fatalities to population',y = 'Log Ratio',x = 'State Name') + theme_minimal() + theme(title = element_text(family = "Trebuchet MS", color="#422164", face="bold", size=15)) + theme(text = element_text(size=8,colour="#266164"))
# Chunk 4
library(reshape)
drowsyAccidents  = fatalities %>% group_by(A_DROWSY,STATE_NAME) %>% summarise(count = n())
drowsyAccidents =cast(drowsyAccidents,STATE_NAME ~ A_DROWSY)
colnames(drowsyAccidents) = c("STATE_NAME","DROWSY","NOT_DROWSY")
drowsyAccidents[is.na(drowsyAccidents)] = 0
ggplot(drowsyAccidents) + aes(x = reorder(STATE_NAME,DROWSY/(NOT_DROWSY+DROWSY)), y = DROWSY/(NOT_DROWSY+DROWSY)) + geom_bar(stat = 'identity') + coord_flip()+ labs(title = 'Percentage of Drowsy drivers involved in accidents State-wise',y = 'Drowsy Drivers/Accident Fatalities',x = 'State Name') + theme_minimal() + theme(title = element_text(family = "Trebuchet MS", color="#422164", face="bold", size=12)) + theme(text = element_text(size=8,colour="#266164"))
# Chunk 5
library(maps)
all_states = map_data("county")
vermont = subset(all_states,region == 'vermont')
base = ggplot() + geom_polygon(data=vermont,aes(x=long,y=lat,group=group),colour = "white",fill='#E4CCCC')
base + geom_point(data = filter(fatalities,STATE_NAME=='Vermont'),aes(x = LONGITUD,y = LATITUDE,colour = as.factor(A_DROWSY)))+ labs(title = 'Location Map for fatalities involving drowsy driver in Vermont',x="",y="",color="") + theme_minimal() + theme(title = element_text(family = "Trebuchet MS", color="#422164", face="bold", size=12),legend.title = element_text(color="red")) + theme(text = element_text(colour="#266164"),axis.text.x = element_blank(),axis.text.y = element_blank()) + scale_color_manual(labels = c("Drowsy Driver", "Non Drowsy Driver"), values = c("red", "blue"))
# Chunk 6
boxplot(fatalities$PERSONS)
quantile(log2(fatalities$PERSONS),prob = (1:100)/100)
quantile(log2(fatalities$PERMVIT),prob = (1:100)/100)
fatalities = subset(fatalities,A_INTER != 3)
fatalities = subset(fatalities, A_TOD != 3)
fatalities = subset(fatalities, drunkDr %in% c(0,1))
fatalities = subset(fatalities, WEATHER %in% c(1,2,3,4,5,6,7,8,10,11,12))
fatalities = subset(fatalities, HOUR != 99)
fatalities = subset(fatalities, A_DOW != 3)
fatalities = subset(fatalities, TYP_INT %in% c(1,2,3,4,5,6,7,8,9,10))
fatalities = subset(fatalities, REL_ROAD %in% c(1,2,3,4,5,6,7,8,10,11))
fatalities = subset(fatalities, REL_ROAD %in% c(1,2,3,4,5,6))
fatalities = filter(fatalities,!LGT_COND %in% c(7,8,9))
ggplot(fatalities,aes(x = factor(STATE_NAME),y=FATALS)) + geom_boxplot(aes(colour = factor(STATE_NAME)),outlier.colour = "red", outlier.size = 1,) + coord_flip() +geom_jitter(size=0.01,alpha=0.05) + labs(title="Fatalities by State (BoxPlot)", x = "State Name", y="Total Fatalities")
fatalities = subset(fatalities, FATALS %in% c(1,2,3,4))
fatalities = subset(fatalities, A_RU != 3)
fatalities = subset(fatalities, A_SPCRA != 3)
fatalities = subset(fatalities, (PERSONS < 9) & (PERSONS > 0) & (PERSONS == PERMVIT) & (FATALS <= PERSONS))
fatalities$PERSONS = NULL
fatalities = subset(fatalities, ROUTE != 9)
fatalities = subset(fatalities, SP_JUR != 9)
fatalities = filter(fatalities, !RELJCT1 %in% c(8,9), !RELJCT2 %in% c(98,99))
fatalities = filter(fatalities, WRK_ZONE != 3)
fatalities = filter(fatalities, !HARM_EV %in% c(6,72,99,73,45,51,2,50,49,20,44,40,48,54,16,3,7,46,41,26,19,57,17,39,58,10,21,23,99))
fatalities$RELJCT1 = NULL
# Chunk 7
ageDrunkFat = rbind(table(fatalities$A_D21_24,fatalities$drunkDr)[1,],table(fatalities$A_D15_20,fatalities$drunkDr)[1,], table(fatalities$A_D65PLS,fatalities$drunkDr)[1,])
chisq.test(ageDrunkFat)
# Chunk 8
library(heatmaply)
wea = sort(table(fatalities$WEATHER))
print(wea/sum(wea))
wea = data.frame(table(fatalities$WEATHER,"STATE_NAME" = fatalities$STATE_NAME))
wea = cast(wea, STATE_NAME ~Var1)
colnames(wea) = c("STATE_NAME","CLEAR", "RAIN","HAIL","SNOW","FOG","HEAVY WIND","SAND", "OTHER","COUDY","BLOWING SNOW","FREEZING RAIN")
row.names(wea) = wea$STATE_NAME
heatmaply((sapply(select(wea,-c(STATE_NAME,CLEAR)),as.numeric)),labRow = row.names(wea),scale = "row",margins = c(100,150))
# Chunk 9
fatalities = select(fatalities, -c(X, ST_CASE, OBJECT_ID, FID, LATITUDE,LONGITUD,STATE_NAME,DAY_WEEK,HOUR))
melt_cor = (round(cor(fatalities),7))
#melt_cor[lower.tri(melt_cor)] <- NA
melt_cor = melt(melt_cor,na.rm=TRUE)
ggplot(data = melt_cor, aes(X1, X2, fill = value))+geom_tile(color = "white")+labs(title="Correlation matrix for variables")+scale_fill_gradient2(low = "blue", high = "red", mi= "white",  midpoint = 0, limit = c(-1,1), space = "Lab", name="Pearson\nCorrelation") +theme_minimal()+ theme(axis.text.x =element_text(angle= 45, vjust = 1, size = 7, hjust = 1),axis.title = element_blank())+coord_fixed()
# Chunk 10
write.csv(fatalities,'filtered_fatalities.csv')
kmeanData = read.csv('Kmeans3.csv',sep="\t")
table(kmeanData$clusters)
kmeanData = read.csv('Kmeans3.csv',sep="\t")
kmeanData = read.csv('Kmeans3.csv')
kmeanData = read.csv('Kmeans3.csv',sep="\t")
columns(kmeanData)
colnames(kmeanData)
kmeanData
kmeanData = read.csv('Kmeans3.csv',sep="\t")
colnames(kmeanData)
table(kmeanData$drunkDr,kmeanData$clusters)
cor(kmeanData)
table(kmeanData$A_PED,kmeanData$clusters)
View(table(kmeanData$A_PED,kmeanData$clusters,kmean))
View(table(kmeanData$A_PED,kmeanData$clusters))
as.matrix(table(kmeanData$A_PED,kmeanData$clusters))
View(as.matrix(table(kmeanData$A_PED,kmeanData$clusters)))
as.data.frame(as.matrix(table(kmeanData$A_PED,kmeanData$clusters)))
cast(as.data.frame(as.matrix(table(kmeanData$A_PED,kmeanData$clusters))),Var1~Var2)
View(cast(as.data.frame(as.matrix(table(kmeanData$A_PED,kmeanData$clusters))),Var1~Var2))
table(kmeanData$REL_ROAD,kmeanData$clusters)
View(cast(as.data.frame(as.matrix(table(kmeanData$REL_ROAD,kmeanData$clusters))),Var1~Var2))
table(kmeanData$clusters)
table(kmeanData$clusters)/sum(table(kmeanData$clusters))
centroids = read.csv('centroids_kmeans.csv')
View(centroids)
str(fatalities)
kmodesData = read.csv('Kmode3.csv')
View(kmodesData)
kmodesData$X = NULL
kmodesData$Unnamed..0 = ULL
kmodesData$Unnamed..0 = NULL
table(kmodesData$clusters)
table(kmodesData$clusters)/sum(table(kmodesData$clusters))
cor(kmodesData)
table(kmodesData$PERMVIT,kmodesData$clusters)
table(kmodesData$A_PED,kmodesData$clusters)
sum(c(13458,6984,1743))
10478+11196
2+10478+11196
22185 - (10478+11196)
table(kmeanData$A_PED,kmeanData$clusters)
View(cast(as.data.frame(as.matrix(table(kmodesData$REL_ROAD,kmodesData$clusters))),Var1~Var2))
x = c(0.82390815019607544, 0.82498118281364441, 0.8209749162197113, 0.82258136570453644, 0.82025372982025146, 0.82292291522026062, 0.82048177719116211, 0.82301314175128937, 0.82066415250301361, 0.82011085748672485, 0.82569471001625061, 0.82752172648906708, 0.83082471787929535, 0.83636240661144257, 0.82673947513103485, 0.83119523525238037, 0.83147227764129639, 0.83187732100486755, 0.8273310661315918, 0.82685333490371704, 0.87936663627624512, 0.87935465574264526, 0.89116464555263519, 0.89293073117733002, 0.8583274632692337, 0.88386045396327972, 0.85491719841957092, 0.85822741687297821, 0.85327719151973724, 0.85717888176441193, 0.85066449642181396, 0.83332362771034241, 0.85931730270385742, 0.85617406666278839, 0.83316256105899811, 0.84285432100296021, 0.8537546694278717, 0.84310328960418701, 0.83422021567821503, 0.85014988481998444, 0.85021394491195679, 0.85163025557994843, 0.84685955941677094, 0.85832998156547546, 0.85720306634902954, 0.83618929982185364, 0.85395553708076477, 0.84486481547355652, 0.86594168841838837, 0.89588974416255951, 0.83736830949783325, 0.8327726423740387, 0.86046551167964935, 0.8753749281167984, 0.84562745690345764, 0.84419707953929901, 0.84338130056858063, 0.84355121850967407, 0.86940015852451324, 0.86532552540302277, 0.84321188926696777, 0.83465513586997986, 0.84007398784160614, 0.85902887582778931, 0.84130217134952545, 0.84913766384124756, 0.83215057849884033, 0.84304259717464447, 0.83949443697929382, 0.85065311193466187, 0.83552537858486176, 0.83327306807041168, 0.85354295372962952, 0.84015481173992157, 0.8391379714012146, 0.83442848920822144, 0.84684845805168152, 0.84173251688480377, 0.84941190481185913, 0.84628503024578094, 0.85616268217563629, 0.83337715268135071, 0.85800144076347351, 0.83442917466163635, 0.83470965921878815, 0.88653887808322906, 0.8319975882768631, 0.8359869122505188, 0.84254342317581177, 0.83943022787570953, 0.84401781857013702, 0.83429965376853943, 0.83644181489944458, 0.83855633437633514, 0.8325343132019043, 0.84067511558532715, 0.83211441338062286, 0.83448252081871033, 0.83804401755332947, 0.87468928098678589, 0.83473028242588043, 0.83743725717067719, 0.83689753711223602, 0.84813539683818817, 0.83605451881885529, 0.8437049388885498, 0.8321249783039093, 0.83269423246383667, 0.84305088222026825, 0.84019112586975098, 0.83780880272388458, 0.83851812779903412, 0.83648279309272766, 0.83601704239845276, 0.83331872522830963, 0.84046518802642822, 0.83211606740951538, 0.83421404659748077, 0.84275826811790466, 0.84002421796321869, 0.86310000717639923, 0.83101016283035278, 0.83623403310775757, 0.84822928905487061, 0.83313852548599243, 0.87243427336215973, 0.83246074616909027, 0.83729086816310883, 0.84917281568050385, 0.84021671116352081, 0.83327892422676086, 0.83367596566677094, 0.86264058947563171, 0.83589339256286621, 0.83239834010601044, 0.88741770386695862, 0.83094415068626404, 0.83210337162017822, 0.83874817192554474, 0.84650345146656036, 0.83547030389308929, 0.83403366804122925, 0.84061725437641144, 0.8370564728975296, 0.83259573578834534, 0.88189128041267395, 0.83239825069904327, 0.83938179910182953, 0.83997543156147003, 0.83849342167377472, 0.84421037137508392, 0.8346894234418869, 0.83652999997138977, 0.84389394521713257, 0.83604830503463745, 0.83864219486713409, 0.83261580765247345, 0.84064710140228271, 0.84276081621646881, 0.85576623678207397, 0.84076517820358276, 0.83210223913192749, 0.86483733355998993, 0.83399611711502075, 0.83204713463783264, 0.8406490683555603, 0.83316263556480408, 0.83355030417442322, 0.84723454713821411, 0.87249763309955597, 0.83711515367031097, 0.83112573623657227, 0.85488592088222504, 0.83925169706344604, 0.8410174697637558, 0.83163204789161682, 0.83313125371932983, 0.83780528604984283, 0.84273365139961243, 0.84675952792167664, 0.83943337202072144, 0.8347967267036438, 0.83994671702384949, 0.84805396199226379, 0.83292947709560394, 0.87531924247741699, 0.84121446311473846, 0.83876423537731171, 0.83821922540664673, 0.86588938534259796)
plot(x)
plot(x,type='l')
table(fatalities$drunkDr)
table(fatalities$FATALS)
kmodesData$fataltopeople = kmodesData$FATALS/kmodesData$PERMVIT
x = x(0.82505261898040771, 0.83183810114860535, 0.88238058984279633, 0.84883749485015869, 0.85727965831756592, 0.86143189668655396, 0.8500741571187973, 0.84928607940673828, 0.85758984088897705, 0.86060203611850739, 0.86021018028259277, 0.84714999794960022, 0.86144727468490601, 0.85716827213764191, 0.85885071754455566, 0.84792302548885345, 0.84623093903064728, 0.85500025749206543, 0.84396648406982422)
x = c(0.82505261898040771, 0.83183810114860535, 0.88238058984279633, 0.84883749485015869, 0.85727965831756592, 0.86143189668655396, 0.8500741571187973, 0.84928607940673828, 0.85758984088897705, 0.86060203611850739, 0.86021018028259277, 0.84714999794960022, 0.86144727468490601, 0.85716827213764191, 0.85885071754455566, 0.84792302548885345, 0.84623093903064728, 0.85500025749206543, 0.84396648406982422)
plot(x)
plot(x,type='l')
qplot(x)
qplot(x,geom='line')
View(x)
View(data.frame(x))
x1 = c(0.82791173458099365, 0.82244393229484558, 0.83410121500492096, 0.83179135620594025, 0.83334048092365265, 0.8337661474943161, 0.83844874799251556, 0.84136554598808289, 0.84080317616462708, 0.83595997095108032, 0.83604913949966431, 0.83555310964584351, 0.83534908294677734, 0.83597783744335175, 0.83368644118309021, 0.83316342532634735, 0.83447927236557007, 0.83283880352973938, 0.83473359048366547)
View(as.data.frame(x1))
x2 = c(0.57637116312980652, 0.61133274435997009, 0.57993048429489136, 0.57541567087173462, 0.58239501714706421, 0.57723957300186157, 0.57514217495918274, 0.57375049591064453, 0.5725749135017395, 0.57512092590332031, 0.57184994220733643, 0.57942825555801392, 0.57228735089302063, 0.57188358902931213, 0.57189324498176575, 0.5749092698097229, 0.57184642553329468, 0.57229366898536682, 0.58687841892242432, 0.57228627800941467)
View(as.data.frame(x2))
table(kmeanData$SP_JUR)
image(fatalities)
image(as.matrix(fatalities))
2:4
